def InputKeys():

# This is the input module.
# It should accept and error check inputs from KEYBOARD, RS232, TEXT FILES and ETHERNET
# The KEYBOARD input on the ECR will come as an RS232 stream of BYTES generated by the onboard keyboard controller

# Key codes will be bytes returned by the keyboard controller  and a dictionary will map whatever function we want on the key numbers
# Keypad is 5X6, so key codes will be 0 to 29.
# the keypad code layout on hardware level is:

# WHEN KEYBOARD LEVEL IS 0 (NORMAL FIRST LEVEL FUNCTIONS):

#   00h ON    01h INVOI  02h PLU   03h PRC    04h MENU
#   05h CLR   06h VOID   07h X     08h TM5    09h SHIFT
#   0ah 7     0bh 8      0ch 9     0dh TM4    0eh DISCNT
#   0fh 4     10h 5      11h 6     12h TM3    13h PMNT
#   14h 1     15h 2      16h 3     17h TM2    18h SUB
#   19h 0     1ah 00     1bh .     1ch TM1    1dh CASH

# WHEN KEYBOARD LEVEL IS 1 (AUTO-TURN TO ALPHANUMERIC):

#   00h ON    01h A      02h B     03h C      04h MENU
#   05h D     06h E      07h F     08h G      09h SHIFT
#   0ah H     0bh I      0ch J     0dh K      0eh L
#   0fh J     10h K      11h L     12h M      13h N
#   14h O     15h P      16h Q     17h R      18h S
#   19h T     1ah W      1bh .     1ch TM1    1dh CASH

#   THE actual transformations should be part of the static.sqlite and be read into lists on startup. In this way we can have multiple keyboard layouts
#   Table keyblayouts in static.sqlite contains all COMMANDS and DATA mapped to key codes 0-29

# I have opened account geta4tvn at github with passw Q2 and then installed git in Dell
# Then used VCS > Import into version control > Share Project on GitHub where I successfuly created repository EngineOneCore
#



    import CheckIn
    import time
    import sqlite3              # I need the sqlite here to read in from static.sqlite, table keyblayouts the mapping between hardware codes and commands
    from sqlite3 import Error

    now = time.time()

    folder='C:\\000 WORK 2017\\2 general\\00 2018 Tevin\\OUR ETR\\CharmSources\\'
    arxeio=folder+'TestKeysIn.txt'
    #time.sleep(1)

    # ======================================================================================================================================
    # This will read commands and data from a test input file (/CharmSources/TestKeysIn.txt) and separate the incoming data into tokens (numbers and commands)
    # When using a test input file, we are using the commands and NOT THE KEYBOARD HARDWARE CODES to generate the input
    # The COMMANDS understood by the system are described in CASH REGISTER ENGINE ANALYSIS.XLSX but are also given below:
    # Tnn : department + nn two digit department code
    # nnn..nnP : any number of digits in front of P: the PLU barcode/code
    # nnn..nnX : any number of digits in front of X: quantity (3 decimals) multiplier
    # nnn..nnr : any number of digits in front of r: price of PLU
    # p<description>

    ReadFile=open(arxeio,"r")
    for line in ReadFile.readlines():
        for x in line:
            if x>chr(32):       # do NOT send LF, CR and other controls
               # print('>>',x)
                CheckIn.CheckIn(x)

    stopped=time.time()

    duration=int(1000*(stopped-now))
    print('THE WHOLE THING TOOK ',duration,'msec')

if __name__ == "__main__":
    InputKeys()
                    


    # line=re.sub('[\s+]','',line)    #(from re) this one from re library substitutes all spaces with nul
    # line=re.sub(',',', ',line)      #use again the substitute function to insert a space after a coma
    # words=line.split()              #(from re) the text.split() function will turn a string into a list provided you have words separated by ", "
    # for M in range(0, 10):
    #     words[M]=re.sub(',','',words[M])  #this is to remove the comma from interfering with numbers
    #     words[M]=re.sub('None','0',words[M])